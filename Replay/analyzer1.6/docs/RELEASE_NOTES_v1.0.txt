Hall A C++ Analyzer version 1.0
-------------------------------

12 June 2003

After more than one year of development since the last beta version, 
the Hall A software team is proud to present the first major release 
of the Hall A C++ Analyzer.



What's new
~~~~~~~~~~
Compared to the previous public release "0.65", a large number of 
new and essential features have been implemented:

  - Full VDC tracking and target reconstruction
  - Time-dependent database system
  - Dynamic output module
  - Dynamic definition of tests for statistics and analysis steering
  - Plugin architecture for post-processing of basic results 
    ("physics modules")
  - Scaler analysis
  - Helicity decoding
  - Up-to-date BPM and raster analysis
  - Large performance improvements (speed, memory)

Both HRS spectrometers are available. By default, they are configured
with the VDC package and two scintillator planes.  Additional detectors
can be added as appropriate for the experiment to be analyzed:

  * Scintillator (one or more paddles with two PMTs each)
  * Cherenkov (arbitrary number of PMTs/mirrors) - describes both the
    gas Cherenkovs and Aerogels in each arm
  * Shower counter (arbitrary organization in terms of rows and columns of
    blocks) - describes both the shower/preshower and the pion rejectors
  * Total shower counter (combination of a preshower and a shower)

The beam position and direction can be reconstructed using an appropriate
"beam" apparatus for either rastered or unrastered beam.

"Physics Modules" can be used to perform a variety of experiment-specific
calculations after the basic spectrometer and beamline analysis.
Currently, the following calculations are available:

  * Electron kinematics (single arm)
  * Reaction point reconstruction ("reaction_z")
  * "Average" and "twoarm" reaction point reconstruction (as in ESPACE)
  * Extended target corrections

Physics modules are designed to be "plugins". For experiments requiring 
specialized calculations of kinematics or any other quantities,
writing a new plugin would be the preferred approach. As many physics
modules as needed can be added to the analyzer before starting replay.
Identical modules can be added multiple times with different parameters. 
For example, on can calculate "electron kinematics" using both uncorrected 
and energy-loss corrected tracks in one analysis pass without modifying 
or recompiling any code.

To control the analysis flow and to collect statistics, tests can be defined 
dynamically at runtime.  If certain tests fail for a given event,
further analysis of that event is skipped, and the event is not
included in the output.  Such tests can be put at the end of all the
major stages of the analysis.  This allows making decisions about an
event early in the analysis, improving performance.  A summary of all
test results is written to a file at the end of the analysis.

Any variables of interest can be histogrammed and/or written to
a ROOT Tree in the output file.  The contents of the output 
is defined dynamically at the beginning of the analysis.
Both 1- and 2-dimensional histograms are supported. Histograms
can be filled subject to logical expressions (cuts).

System requirements
~~~~~~~~~~~~~~~~~~~
* Linux with gcc/g++; or Solaris with the Sun Workshop compiler
* ROOT 3.02 or higher
* GNU make
* Decent hardware (at least 300MHz CPU, 128MB RAM).

The following platforms have been tested:

  - RedHat Linux 8 with default compiler (gcc 3.2) and ROOT 3.04-02
    (compiled locally).
  - RedHat Linux 7.2 with gcc-3.0.4 and ROOT 3.03-06-gcc3.0.4 (ifarml1/2/3).
  - RedHat Linux 7.2/7.3 with gcc-2.96 and ROOT 3.02-06 (adaql1/2/3/4).
  - SuSE Linux 8 with the SuSE default compiler (g++ 2.95?) and ROOT 3.03
    (from CERN).
  - Solaris 2.6 with Sun Workshop compiler suite 6, C++ 5.3 (ifarms1).

The analyzer requires typically 20-50MB of virtual memory.

Building and installing the program
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Please see docs/install.html

Running the program / How to analyze data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Please see docs/quickstart.html

Known Limitations
~~~~~~~~~~~~~~~~~
The following is a summary of known limitations. We expect to remove
most of these within the next several months. Code already exists
to address some of the items below and is currently being tested.

- The multi-cluster VDC analysis has not been tested thoroughly and
  will currently produce results different from ESPACE. 
  In particular, cluster fits use two parameters, not three as
  they should in order to take a common timing offset ("t0") into account.

  Therefore we recommend that you only analyze "clean" events
  with exactly one cluster per VDC plane at this tims.

- No scintillator timing corrections are calculated.

- VDC cluster fits are not corrected for scintillator timewalk and
  the particle's time of flight.  The effect of this should be small,
  however.

- The shower counter code uses a simpler cluster finding algorithm 
  than that in ESPACE. The results will therefore be different from ESPACE.
  
- No physics modules are available yet for the following 
  calculations done by ESPACE:

    * Secondary particle kinematics
    * Beta & time-of-flight
    * Coincidence time
    * Target energy loss corrections

  These calculations currently have to be done externally in 
  a ROOT analysis macro.

- Most physics modules only operate on the Golden Track of a 
  given spectrometer.

- There is no code yet to analyze the FPP.

- The decoded beam helicity may differ occasionally from that decoded
  by ESPACE due to different prediction algorithms. The differences
  are small (typically at the 1e-4 level or less), depending on the
  quality of the raw data.

- Only the G0 beam helicity scheme is currently supported.
  Helicity information from runs before 2003 must be decoded
  separately (e.g. using THaDecData).

- Arrays cannot be used in formula and histogram definitions
  for the output. Arrays must be written in unmodified form to the output
  tree. The tree can then be post-processed with an analysis macro.
  Histograms must be defined explicitly for every array element.

- The ability to define global variables via ROOT's RTTI interface is
  restricted to a nesting depth of one. Array elements cannot be
  defined directly. No arguments can be passed to member functions
  called to retrieve data. 

  This is mostly an inconvenience for authors of new detector/apparatus
  classes.

- Currently it is not possible to use any sort of string variables and/or 
  conditionals in the cut and output definition files.  This means,
  for example, that cuts and output for left and right arm HRS must be
  defined in separate definition files, even if the definitions are
  very similar (i.e. only differ by the apparatus name).

- Only one cut and one output definition file can be loaded at the beginning
  of the analysis.

- The cut definition file is not checked for the correct order of the
  analysis stage blocks. By arranging blocks in a non-standard order,
  it is possible to mess up the test logic.

- Histograms are always filled after the "Physics" analysis stage.
  If events do not reach that point due to failed tests at earlier stages,
  no data from such events can be histogrammed. As a workaround, do not
  use tests to skip events of interest for histogramming.

- There are some issues with the storage of the history of decoded EPICS
  (slow control) variables.

- Analyzing the second and subsequent segments of split data files does
  not work because these files do not contain a prestart event.

- There is no "configure" script to handle system dependences of
  the Makefiles etc.  Whatever changes to the Makefiles are necessary 
  (not many) must be made by hand.

- On Solaris, gcc must be installed even though the analyzer is compiled 
  with the Sun compiler.  gcc is used to create the include file dependency 
  lists.

- Several classes contain direct Unix system calls, making porting
  to non-Unix platforms not trivial.

Example Scripts
~~~~~~~~~~~~~~~
Up-to-date example scripts can be found in the "examples" subdirectory.

Documentation
~~~~~~~~~~~~~
Further documentation is available in the "docs" subdirectory and
at the project home page:

	http://hallaweb.jlab.org/root/


